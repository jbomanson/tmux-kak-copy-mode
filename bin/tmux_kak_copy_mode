#! /bin/bash

TMUX_KAK_COPY_MODE_DEBUG=""

prompt_message="# Insert lines below to be sent back to the pane."

# Capture the specified tmux pane contents with escape sequences (-e)
# and remove all trailing whitespaces.
# Otherwise there will be too much whitespace.
#
# Usage:
#   private_capture_pane -t <pane_id>
function private_capture_pane ()
{
    tmux capture-pane -S- -E -J -p -e "$@" \
        | perl -pe "s/[ \t]+$//"
}

scratch_dir=""

clean_up_scratch_dir () {
    code=$?
    rm -rf "$scratch_dir"
    exit $code
}


if test -n "$TMUX_KAK_COPY_MODE_DEBUG"; then
    debug_echo () {
        printf "%s\n" "# tmux_kak_copy_mode: $*"
    }
else
    debug_echo () {
        true
    }
fi

create_scratch_dir ()
{
    scratch_dir=$(mktemp -d "${TMPDIR:-/tmp}"/tmux_kak_copy_mode.XXXXXXXX)
    printf "%s\n" "$scratch_dir"
}

tmux_kak_session ()
{
    {
        tmux show-option -vw @kak_info_sessions
        tmux show-option -v  @kak_info_sessions
    } | grep -F "$(kak -l)" | head -n1
}

gather_information ()
{
    local info_dir="$1"
    local content_file="$info_dir/content"
    local metadata_file="$info_dir/metadata"

    test -d "$info_dir" || mkdir "$info_dir"

    private_capture_pane >"$content_file"

    {
        scroll_region_lower="$(tmux display-message -p "#{scroll_region_lower}")"
        tmux display-message -p "$(printf "#{pane_id}\n#{cursor_x}\n#{cursor_y}\n#{scroll_region_upper}\n#{scroll_region_lower}")"
        debug_tmux_options gather_information
        # NOTE: This is only for debugging
        tmux_visible_lines="$(tmux capture-pane -J -p -e "$@" | grep -c "^")"
        tmux_visible_lines="${tmux_visible_lines%% *}"
        debug_echo "tmux_visible_lines: $tmux_visible_lines"
    } >"$metadata_file"
}

debug_tmux_options ()
{
    context="$1"
    shift
    debug_echo "$context: scroll_region_lower: $(tmux display-message -p "$@" "#{scroll_region_lower}")"
    debug_echo "$context: pane_bottom: $(tmux display-message -p "$@" "#{pane_bottom}")"
    debug_echo "$context: pane_top: $(tmux display-message -p "$@" "#{pane_top}")"
    debug_echo "$context: cursor_x: $(tmux display-message -p "$@" "#{cursor_x}")"
    debug_echo "$context: cursor_y: $(tmux display-message -p "$@" "#{cursor_y}")"
    debug_echo "$context: history_limit: $(tmux display-message -p "$@" "#{history_limit}")"
}

run_kak_here ()
{
    scratch_dir="$1"; shift
    trap clean_up_scratch_dir EXIT
    local content_file="$scratch_dir/content"
    local metadata_file="$scratch_dir/metadata"

    arguments_to_temporary_tmux_pane=("$@")

    mapfile -t <"$metadata_file"
    set -- "${MAPFILE[@]}"
    displaced_pane_id="$1"; shift
    tmux_cursor_x="$1"; shift
    tmux_cursor_y="$1"; shift
    scroll_region_lower="$1"; shift

    # NOTE: This is only for setting the cursor position
    # NOTE: Sometimes this ends in a newline, sometimes not.
    tmux_content_lines="$(grep -c "^" "$content_file")"
    tmux_content_lines="${tmux_content_lines%% *}"

    # Append some extra lines to the content file.
    {
        debug_echo "arguments_to_temporary_tmux_pane: ${arguments_to_temporary_tmux_pane[*]}"
        # This seems informative, except for the cursor which is always 0.
        debug_tmux_options here_temporary "${arguments_to_temporary_tmux_pane[@]}"
        debug_echo "tmux_content_lines: $tmux_content_lines"
        debug_echo "received tmux_cursor_x: $tmux_cursor_x"
        debug_echo "received tmux_cursor_y: $tmux_cursor_y"
        debug_echo "received scroll_region_upper: $scroll_region_upper"
        debug_echo "received scroll_region_lower: $scroll_region_lower"
        printf "%s\n" "$prompt_message"
    } >>"$content_file"

    let y_offset=tmux_content_lines-scroll_region_lower
    let kak_x=tmux_cursor_x+1
    let kak_y=tmux_cursor_y+y_offset

    kak_session="$(tmux_kak_session)"
    if test -n "$kak_session"; then
        session_arguments=(-c "$kak_session")
    else
        session_arguments=()
    fi

    kak \
        "${session_arguments[@]}" \
        -e "
            try %(
              ansi-render
              try %(
                  write
                  execute-keys 'ge'
                  select $kak_y.$kak_x,$kak_y.$kak_x
              )
              nop %sh(
                  tmux set-option -p @tmux_kak_copy_mode_kak_buffile \
                      \"\$kak_buffile\"
                  tmux set-option -p @tmux_kak_copy_mode_kak_client \
                      \"\$kak_client\"
                  tmux set-option -p @tmux_kak_copy_mode_kak_session \
                      \"\$kak_session\"
              )
              set-option buffer filetype tmux_kak_copy_mode
              declare-option str tmux_kak_copy_mode_displaced_pane_id
              set-option buffer tmux_kak_copy_mode_displaced_pane_id \
                  '$displaced_pane_id'
            ) catch %(
              edit!
              execute-keys 'ge'
              set-option buffer filetype tmux_kak_copy_mode
              fail tmux_kak_copy_mode: failed to call ansi-render
            )
        " \
        "$content_file"

    tmux set-option -pu @tmux_kak_copy_mode_kak_buffile
    tmux set-option -pu @tmux_kak_copy_mode_kak_client
    tmux set-option -pu @tmux_kak_copy_mode_kak_session

    if test -n "$kak_session"; then
        printf "%s" "delete-buffer '$content_file'" | kak -p "$kak_session"
    fi

    response="$(grep -P -m1 -A 100000 "^\Q$prompt_message\E$" -- "$content_file" | tail -n+2)"
    if test -n "$response"; then
        printf -v response "%s\n" "$response"
        tmux send-keys -l -t "$displaced_pane_id" "$response"
    fi
}

run_kak_in_new_window ()
{
    local scratch_dir="$(create_scratch_dir)"
    local calling_pane_id="$(tmux display-message -p "#{pane_id}")"
    local new_name="tmux_kak_copy_mode ($(tmux display-message -p '#{pane_current_command}'))"
    gather_information "$scratch_dir/sub"
    tmux new-window -d -n "$new_name" \
        "$0" private_in_new_window_callback "$scratch_dir" "$calling_pane_id"
    # The above tmux command returns immediately without waiting for the
    # callback to finish.
    # In fact, anything else would be disastrous if run_kak_in_new_window is being
    # called from a tmux key binding because tmux would then get stuck.
}

private_in_new_window_callback ()
{
    local scratch_dir="$1"; shift
    local calling_pane_id="$1"; shift
    local stderr_file="$scratch_dir/new_window.stderr"
    tmux swap-pane -s "$calling_pane_id" -t "$TMUX_PANE"
    # Pass a sub directory of scratch_dir with gathered information in it because:
    # - here-with_info will remove its argument directory afterward and
    # - we do not want scratch_dir to be removed until the end of this file.
    "$0" private_here_with_info "$scratch_dir/sub" -t "$calling_pane_id" 2>"$stderr_file"
    local exit_status="$?"
    if test "$exit_status" -ne 0 -o -s "$stderr_file"; then
        echo "Got some kind of an error"
        printf "%s\n" "tmux_kak_copy_mode: exit status: $exit_status" >>"$stderr_file"
        env SHELL="/bin/bash" tmux run-shell -t "$calling_pane_id" "cat '$stderr_file'"
    fi
    tmux swap-pane -s "$calling_pane_id" -t "$TMUX_PANE"
    clean_up_scratch_dir
}

refresh_kak_or ()
{
    local buffile="$(tmux show-options -pqv @tmux_kak_copy_mode_kak_buffile)"
    if test "$buffile"; then
        local client="$(tmux show-options -pqv @tmux_kak_copy_mode_kak_client)"
        local session="$(tmux show-options -pqv @tmux_kak_copy_mode_kak_session)"
        printf "%s" "evaluate-commands %(
            evaluate-commands -client '$client' %(
                buffer '$buffile'
                nop %sh(
                    tmux_kak_copy_mode private_capture_pane \
                      -t \"\$kak_opt_tmux_kak_copy_mode_displaced_pane_id\" \
                      >'$buffile'
                )
                ansi-clear
                edit!
                try %(
                    ansi-render
                    try %(write)
                ) catch %(
                    edit!
                    fail tmux_kak_copy_mode: failed to call ansi-render
                )
            )
        )" | kak -p "$session"
    else
        "$@"
    fi
}

mode="$1"
shift

if test "$mode" = "here"; then
    scratch_dir="$(create_scratch_dir)"
    gather_information "$scratch_dir"
    run_kak_here "$scratch_dir" "$@"
elif test "$mode" = "in_new_window"; then
    refresh_kak_or run_kak_in_new_window
elif test "$mode" = "private_capture_pane"; then
    private_capture_pane "$@"
elif test "$mode" = "private_here_with_info"; then
    run_kak_here "$@"
elif test "$mode" = "private_in_new_window_callback"; then
    private_in_new_window_callback "$@"
else
    printf "%s\n" "usage:"
    printf "%s\n" "tmux_kak_copy_mode here"
    printf "%s\n" "tmux_kak_copy_mode here -t <some_pane_id>"
    # NOTE: This is an undocumented implementation detail:
    # printf "%s\n" "tmux_kak_copy_mode private_here_with_info <scratch_dir> [-t <some_pane_id>]
    printf "%s\n" "tmux_kak_copy_mode in_new_window"
fi
